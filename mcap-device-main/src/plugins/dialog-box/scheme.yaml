#Является надстройской над плагином  [ character ]


- dialog-box: true # отобразить компонент диалогового окна
- dialog-box: false # скрыть компонент диалогового окна
- dialog-box: clear # очишает диалоговое окно от реплики и имени персонажа
- dialog-box: disabled # отключаем возмнозность клика, для включения необходимо передать параметр true
- dialog-box: fullscreen # mode-fullscreen Диалоговое окно на весь экран. disabled = false 
- dialog-box: classic # mode-classic Обычное диалоговое окно. disabled = false
- dialog-box: transparent # Сделать прозрачным

# Плагин [ character ]
# 
- $: # Зарезервированный движком индификатор. Не рекомендуется удалять из файла characters.yaml 
- +: Привет # Плагин [ + ] добавляет реплику к текущему содержимому диалогового окна
- +: мир 



- Привет мир! # реплика от имени автора
- $: Еще раз привет # реплика от имени автора
- al: Реплика от имени Алисы # персонаж, должен быть зарегестрирован в файле $root/character.yaml

# Если реплика содержит html - теги, переменные, ссылку на персонажа
# то её необходимо заключать в ковычки. Если этого не делать, то есть риск натыкаться
# на непредвиденные ошибки
- '<span style="font-size: 14px">test</span>'
- 'Выводим имя  персонажа. Привет @$ , меня зовут @alice '
- 'Мне {{age}} лет'
# Так же желательно, не использовать пустые теги. 
# Так как возникает ошибка
- <span></span> 

# Можно подставить имя персонажа в реплику 
# через указание спец символа собака(at) @ и id персонажа 
- Всё ходит по цепи <font color="orange">@al</font> кругом @$ привет @kr тестируем строку
# Если строка начинается с вставки имени персонажа, то её необходимо заключать в ковычки
- $: "@$"
# Можно подставить переменные в строку.
- $: Мне исполнилось  <font color="deepskyblue">{{age}}</font>  лет
# Переменные задаются через плагин data 

# Если строка начинается с переменной, то её необходимо заключить в ковычки
# Так как yaml поддерживает json конструкции, 
# то он воспримет запись вида {{}} как объект, а не как строку
# 
- data-set:
    name: Сергей
- $: '{{name}}'
##########################################################################
# CHARACTER
- $:
    reply: test
    avatar: ch
    nameColor: '#c90076'
    replyColor: '#ff0497'


- al: 
    reply: Test 1111111 1111111 11111111 1111111        333

- al: 
    reply: text text text
    nameColor: '#7cf732'
    replyColor: '#33f732' 
    avatar: p1


- al: 
    reply: ---------- - ------
    nameColor: brown
    replyColor: silver
    avatar: ev


####### Посимвольный вывод текста ##########
# глабальные параметры указываются в файле  package.yaml
dialog-box:
  delay: 10
  alpha: 0.1
  endPoint: true

# так же можно и по ходу выполнения YAML скрипта изменить скорость вывода текста
# Так как плагин [ character ($, ...) ] и плагин [ dialog-box ] используют совместно
# один класс. 
# А текущий объект [ - ctx ] разбирается парсером по порядку с верху вниз
# то если мы вызовем сперва плагин [ character ($, ...) ], И в этом же объекте 
# вызовем плагин [ dialog-box ] с новыми параметрами. Параметры применятся, но в текущем объекте
# результата их применения не будет видно, только в последующих.
# Но этого эффекта можно избежать, если  в первую очередь вызвать плагин [ dialog-box ]
# А потом плагин вывода реплик персонажа

- dialog-box:
    delay: 40
    #alpha: 0.1
    endPoint: true
  $:
    reply: 4444 4 4 4 4 4 4
    info: 4444
    borderColor: '#17fa58'

# delay = 0 - отключает режим посимвольного вывода текста
- dialog-box:
    delay: 0


# API
#
# EVENTS
#
#    vnjs.on('dialog-box.print', () => {

#    })


#
#    vnjs.on('dialog-box:disabled', flag)

################ delay > 0 ###############

#    vnjs.on('dialog-box:character', letter => {
#        console.log(ch)
#    })
#    vnjs.on('dialog-box:endOutputReply')
#    vnjs.on('dialog-box.false')
#    vnjs.on('dialog-box.clear')
#    vnjs.on('dialog-box.click' )
#    vnjs.on('dialog-box.avatar-click')
#    vnjs.on('dialog-box.mode', this.MODE)